// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	request "movie-rating-service/internal/application/models/request"

	mock "github.com/stretchr/testify/mock"

	response "movie-rating-service/internal/application/models/response"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, req
func (_m *UserService) Create(ctx context.Context, req request.CreateUser) (*response.CreateUser, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *response.CreateUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.CreateUser) (*response.CreateUser, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.CreateUser) *response.CreateUser); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.CreateUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.CreateUser) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, req
func (_m *UserService) Get(ctx context.Context, req request.GetUser) (*response.GetUser, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *response.GetUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.GetUser) (*response.GetUser, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.GetUser) *response.GetUser); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.GetUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.GetUser) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAuthorized provides a mock function with given fields: ctx, req
func (_m *UserService) IsAuthorized(ctx context.Context, req request.Login) (*response.GetUser, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for IsAuthorized")
	}

	var r0 *response.GetUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.Login) (*response.GetUser, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.Login) *response.GetUser); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.GetUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.Login) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
