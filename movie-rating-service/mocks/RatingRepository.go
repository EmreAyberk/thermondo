// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "movie-rating-service/internal/domain"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// RatingRepository is an autogenerated mock type for the RatingRepository type
type RatingRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, rating, tx
func (_m *RatingRepository) Create(ctx context.Context, rating domain.Rating, tx ...*gorm.DB) (*domain.Rating, error) {
	_va := make([]interface{}, len(tx))
	for _i := range tx {
		_va[_i] = tx[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, rating)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.Rating
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Rating, ...*gorm.DB) (*domain.Rating, error)); ok {
		return rf(ctx, rating, tx...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Rating, ...*gorm.DB) *domain.Rating); ok {
		r0 = rf(ctx, rating, tx...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Rating)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Rating, ...*gorm.DB) error); ok {
		r1 = rf(ctx, rating, tx...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, rating, tx
func (_m *RatingRepository) Delete(ctx context.Context, rating domain.Rating, tx ...*gorm.DB) error {
	_va := make([]interface{}, len(tx))
	for _i := range tx {
		_va[_i] = tx[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, rating)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Rating, ...*gorm.DB) error); ok {
		r0 = rf(ctx, rating, tx...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByUserID provides a mock function with given fields: ctx, userID, tx
func (_m *RatingRepository) GetByUserID(ctx context.Context, userID uint, tx ...*gorm.DB) ([]domain.Rating, error) {
	_va := make([]interface{}, len(tx))
	for _i := range tx {
		_va[_i] = tx[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, userID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 []domain.Rating
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, ...*gorm.DB) ([]domain.Rating, error)); ok {
		return rf(ctx, userID, tx...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, ...*gorm.DB) []domain.Rating); ok {
		r0 = rf(ctx, userID, tx...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Rating)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, ...*gorm.DB) error); ok {
		r1 = rf(ctx, userID, tx...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserIDAndMovieID provides a mock function with given fields: ctx, userID, movieID, tx
func (_m *RatingRepository) GetByUserIDAndMovieID(ctx context.Context, userID uint, movieID uint, tx ...*gorm.DB) (*domain.Rating, error) {
	_va := make([]interface{}, len(tx))
	for _i := range tx {
		_va[_i] = tx[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, userID, movieID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserIDAndMovieID")
	}

	var r0 *domain.Rating
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint, ...*gorm.DB) (*domain.Rating, error)); ok {
		return rf(ctx, userID, movieID, tx...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint, ...*gorm.DB) *domain.Rating); ok {
		r0 = rf(ctx, userID, movieID, tx...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Rating)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, uint, ...*gorm.DB) error); ok {
		r1 = rf(ctx, userID, movieID, tx...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, rating, tx
func (_m *RatingRepository) Update(ctx context.Context, rating domain.Rating, tx ...*gorm.DB) error {
	_va := make([]interface{}, len(tx))
	for _i := range tx {
		_va[_i] = tx[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, rating)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Rating, ...*gorm.DB) error); ok {
		r0 = rf(ctx, rating, tx...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRatingRepository creates a new instance of RatingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRatingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RatingRepository {
	mock := &RatingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
