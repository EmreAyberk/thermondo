// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "movie-rating-service/internal/domain"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// MovieRepository is an autogenerated mock type for the MovieRepository type
type MovieRepository struct {
	mock.Mock
}

// AddRating provides a mock function with given fields: ctx, movieID, score, tx
func (_m *MovieRepository) AddRating(ctx context.Context, movieID uint, score float64, tx ...*gorm.DB) error {
	_va := make([]interface{}, len(tx))
	for _i := range tx {
		_va[_i] = tx[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, movieID, score)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddRating")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, float64, ...*gorm.DB) error); ok {
		r0 = rf(ctx, movieID, score, tx...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, movie, tx
func (_m *MovieRepository) Create(ctx context.Context, movie domain.Movie, tx ...*gorm.DB) (*domain.Movie, error) {
	_va := make([]interface{}, len(tx))
	for _i := range tx {
		_va[_i] = tx[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, movie)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Movie, ...*gorm.DB) (*domain.Movie, error)); ok {
		return rf(ctx, movie, tx...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Movie, ...*gorm.DB) *domain.Movie); ok {
		r0 = rf(ctx, movie, tx...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Movie)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Movie, ...*gorm.DB) error); ok {
		r1 = rf(ctx, movie, tx...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, movie, tx
func (_m *MovieRepository) Delete(ctx context.Context, movie domain.Movie, tx ...*gorm.DB) error {
	_va := make([]interface{}, len(tx))
	for _i := range tx {
		_va[_i] = tx[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, movie)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Movie, ...*gorm.DB) error); ok {
		r0 = rf(ctx, movie, tx...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRating provides a mock function with given fields: ctx, movieID, score, tx
func (_m *MovieRepository) DeleteRating(ctx context.Context, movieID uint, score float64, tx ...*gorm.DB) error {
	_va := make([]interface{}, len(tx))
	for _i := range tx {
		_va[_i] = tx[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, movieID, score)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRating")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, float64, ...*gorm.DB) error); ok {
		r0 = rf(ctx, movieID, score, tx...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *MovieRepository) Get(ctx context.Context, id uint) (*domain.Movie, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*domain.Movie, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *domain.Movie); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Movie)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx
func (_m *MovieRepository) List(ctx context.Context) ([]domain.Movie, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Movie, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Movie); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Movie)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, movie, tx
func (_m *MovieRepository) Update(ctx context.Context, movie domain.Movie, tx ...*gorm.DB) error {
	_va := make([]interface{}, len(tx))
	for _i := range tx {
		_va[_i] = tx[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, movie)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Movie, ...*gorm.DB) error); ok {
		r0 = rf(ctx, movie, tx...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRating provides a mock function with given fields: ctx, movieID, oldScore, newScore, tx
func (_m *MovieRepository) UpdateRating(ctx context.Context, movieID uint, oldScore float64, newScore float64, tx ...*gorm.DB) error {
	_va := make([]interface{}, len(tx))
	for _i := range tx {
		_va[_i] = tx[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, movieID, oldScore, newScore)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRating")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, float64, float64, ...*gorm.DB) error); ok {
		r0 = rf(ctx, movieID, oldScore, newScore, tx...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMovieRepository creates a new instance of MovieRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMovieRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MovieRepository {
	mock := &MovieRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
