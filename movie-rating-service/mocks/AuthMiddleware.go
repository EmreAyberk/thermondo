// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	fiber "github.com/gofiber/fiber/v2"

	mock "github.com/stretchr/testify/mock"
)

// AuthMiddleware is an autogenerated mock type for the AuthMiddleware type
type AuthMiddleware struct {
	mock.Mock
}

// AdminHandler provides a mock function with given fields: ctx
func (_m *AuthMiddleware) AdminHandler(ctx *fiber.Ctx) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AdminHandler")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserHandler provides a mock function with given fields: ctx
func (_m *AuthMiddleware) UserHandler(ctx *fiber.Ctx) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UserHandler")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAuthMiddleware creates a new instance of AuthMiddleware. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthMiddleware(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthMiddleware {
	mock := &AuthMiddleware{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
