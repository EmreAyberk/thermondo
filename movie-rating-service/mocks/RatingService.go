// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	request "movie-rating-service/internal/application/models/request"

	mock "github.com/stretchr/testify/mock"

	response "movie-rating-service/internal/application/models/response"
)

// RatingService is an autogenerated mock type for the RatingService type
type RatingService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, req
func (_m *RatingService) Create(ctx context.Context, req request.CreateRating) (*response.CreateRating, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *response.CreateRating
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.CreateRating) (*response.CreateRating, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.CreateRating) *response.CreateRating); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.CreateRating)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.CreateRating) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, req
func (_m *RatingService) Delete(ctx context.Context, req request.DeleteRating) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, request.DeleteRating) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRatingsByUserID provides a mock function with given fields: ctx, req
func (_m *RatingService) GetRatingsByUserID(ctx context.Context, req request.GetUserRatings) (*response.GetUserRatings, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetRatingsByUserID")
	}

	var r0 *response.GetUserRatings
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.GetUserRatings) (*response.GetUserRatings, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.GetUserRatings) *response.GetUserRatings); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.GetUserRatings)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.GetUserRatings) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, req
func (_m *RatingService) Update(ctx context.Context, req request.UpdateRating) (*response.UpdateRating, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *response.UpdateRating
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.UpdateRating) (*response.UpdateRating, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.UpdateRating) *response.UpdateRating); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.UpdateRating)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.UpdateRating) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRatingService creates a new instance of RatingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRatingService(t interface {
	mock.TestingT
	Cleanup(func())
}) *RatingService {
	mock := &RatingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
